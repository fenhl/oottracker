use {
    std::{
        borrow::Cow,
        collections::HashMap,
        ops::{
            BitAnd,
            RangeInclusive,
        },
    },
    async_proto::Protocol,
    collect_mac::collect,
};

oottracker_derive::settings!();

impl Knowledge {
    pub fn vanilla() -> Self {
        Self {
            world_count: 1..=1,
            player_num: 1..=1,
            randomize_settings: Some(false),
            open_forest: OpenForestKnowledge::closed(),
            open_kakariko: OpenKakarikoKnowledge::closed(),
            open_door_of_time: Some(false),
            zora_fountain: ZoraFountainKnowledge::closed(),
            gerudo_fortress: GerudoFortressKnowledge::normal(),
            bridge: BridgeKnowledge::vanilla(),
            bridge_medallions: 6..=6,
            bridge_stones: 3..=3,
            bridge_rewards: 9..=9,
            bridge_tokens: 100..=100,
            triforce_hunt: Some(false),
            triforce_goal_per_world: 20..=20,
            logic_rules: LogicRulesKnowledge::glitchless(),
            reachable_locations: ReachableLocationsKnowledge::all(),
            bombchus_in_logic: Some(false),
            one_item_per_dungeon: Some(false),
            trials_random: Some(false),
            trials: 6..=6,
            skip_child_zelda: Some(false),
            no_escape_sequence: Some(false),
            no_guard_stealth: Some(false),
            no_epona_race: Some(false),
            skip_some_minigame_phases: Some(false),
            useful_cutscenes: Some(true),
            complete_mask_quest: Some(false),
            fast_chests: Some(false),
            logic_no_night_tokens_without_suns_song: Some(false),
            free_scarecrow: Some(false),
            fast_bunny_hood: Some(false),
            start_with_rupees: Some(false),
            start_with_consumables: Some(false),
            starting_hearts: 3..=3,
            chicken_count_random: Some(false),
            chicken_count: 7..=7,
            big_poe_count_random: Some(false),
            big_poe_count: 10..=10,
            shuffle_kokiri_sword: Some(false),
            shuffle_ocarinas: Some(false),
            shuffle_weird_egg: Some(false),
            shuffle_gerudo_card: Some(false),
            shuffle_song_items: ShuffleSongItemsKnowledge::song(),
            shuffle_cows: Some(false),
            shuffle_beans: Some(false),
            shuffle_medigoron_carpet_salesman: Some(false),
            shuffle_interior_entrances: ShuffleInteriorEntrancesKnowledge::off(),
            shuffle_grotto_entrances: Some(false),
            shuffle_dungeon_entrances: Some(false),
            shuffle_overworld_entrances: Some(false),
            mix_entrance_pools: MixEntrancePoolsKnowledge::off(),
            decouple_entrances: Some(false),
            owl_drops: Some(false),
            warp_songs: Some(false),
            spawn_positions: Some(false),
            shuffle_scrubs: ShuffleScrubsKnowledge::off(),
            shopsanity: ShopsanityKnowledge::off(),
            tokensanity: TokensanityKnowledge::off(),
            shuffle_mapcompass: ShuffleMapcompassKnowledge::vanilla(),
            shuffle_smallkeys: ShuffleSmallkeysKnowledge::any_dungeon(), // logically account for the lock on the Fire Temple boss key loop
            shuffle_hideoutkeys: ShuffleHideoutkeysKnowledge::vanilla(),
            shuffle_bosskeys: ShuffleBosskeysKnowledge::vanilla(),
            shuffle_ganon_bosskey: ShuffleGanonBosskeyKnowledge::vanilla(),
            ganon_bosskey_medallions: 6..=6,
            ganon_bosskey_stones: 3..=3,
            ganon_bosskey_rewards: 9..=9,
            ganon_bosskey_tokens: 100..=100,
            lacs_condition: LacsConditionKnowledge::vanilla(),
            lacs_medallions: 6..=6,
            lacs_stones: 3..=3,
            lacs_rewards: 9..=9,
            lacs_tokens: 100..=100,
            enhance_map_compass: Some(false),
            mq_dungeons_random: Some(false),
            mq_dungeons: 0..=0,
            disabled_locations: HashMap::default(), //TODO set all to false
            allowed_tricks: collect![
                Cow::Borrowed("logic_vanilla_water_temple") => true,
                Cow::Borrowed("logic_vanilla_spirit_temple") => true,
            ], //TODO set all others to false
            logic_earliest_adult_trade: LogicEarliestAdultTradeKnowledge::pocket_egg(),
            logic_latest_adult_trade: LogicLatestAdultTradeKnowledge::pocket_egg(),
            starting_equipment: HashMap::default(), //TODO set all to false
            starting_items: HashMap::default(), //TODO set all to false
            starting_songs: HashMap::default(), //TODO set all to false
            ocarina_songs: Some(false),
            correct_chest_sizes: Some(false),
            clearer_hints: Some(false),
            no_collectible_hearts: Some(false),
            hints: HintsKnowledge::none(),
            hint_dist: HintDistKnowledge::useless(),
            text_shuffle: TextShuffleKnowledge::none(),
            misc_hints: Some(false),
            ice_trap_appearance: IceTrapAppearanceKnowledge::junk_only(),
            junk_ice_traps: JunkIceTrapsKnowledge::normal(),
            item_pool_value: ItemPoolValueKnowledge::balanced(),
            damage_multiplier: DamageMultiplierKnowledge::normal(),
            starting_tod: StartingTodKnowledge::forenoon(),
            starting_age: StartingAgeKnowledge::child(),
        }
    }
}

#[derive(Debug, Clone, Copy)]
pub struct Contradiction;
